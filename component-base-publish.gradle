apply plugin: 'maven'


def isReleaseBuild() {
    return !getAarVersionName().toUpperCase().contains("SNAPSHOT")
}

// 先读取jenkins配置的参数，然后在读本地的配置
def getAarVersionName() {
    return System.getenv()['AAR_VERSION_NAME'] as String ?:VERSION_NAME
}

// 先读取jenkins配置的参数，然后在读本地电脑的配置
def getRepositoryUsername() {
    return System.getenv()['NEXUS_USERNAME'] as String ?:(hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : "")
}

// 先读取jenkins配置的参数，然后在读本地电脑的配置
def getRepositoryPassword() {
    return System.getenv()['NEXUS_PASSWORD'] as String ?: (hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : "")
}
// 先读取项目配置的参数，没有的话就用默认的
def getReleaseRepositoryUrl(){
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL : default_release_repository_url
}
// 先读取项目配置的参数，没有的话就用默认的
def getSnapShotRepositoryUrl(){
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL : default_snapshot_repository_url
}

ext {
    default_snapshot_repository_url='http://nexus.vesync.com:9081/repository/app-snapshots/'
    default_release_repository_url="http://nexus.vesync.com:9081/repository/app-releases/"
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                pom.groupId = GROUP
                pom.artifactId = POM_ARTIFACT_ID
                pom.version = getAarVersionName()
                pom.packaging = 'aar'
                pom.name = 'vesync'

                if (isReleaseBuild()) {
                    repository(url: getReleaseRepositoryUrl()) {
                        authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                    }
                } else {
                    snapshotRepository(url: getSnapShotRepositoryUrl()) {
                        authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                    }
                }
            }
        }
    }
}